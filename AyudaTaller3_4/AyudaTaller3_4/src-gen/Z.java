// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/Z.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class Z {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=5;
      Object P=$fix(Z.createAutomaton());
      $line=6;
      Z.testAutomaton($cast(gold.structures.automaton.ITransducer.class,P));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Z.class,"main",$line);
    }
  }
  public static Object testAutomaton(ITransducer M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=12;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=13;
      while (true) {
        if (!($bool(true))) break;
        $line=14;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=15;
        System.out.println($message(new Object[]{"Digite la cadena de entrada:"}));
        $line=16;
        Object string=$fix($opAdditY(((java.util.Scanner)sc).nextLine()," "));
        $line=17;
        Object result=$fix(((gold.structures.automaton.ITransducer)M).acceptsString($cast(java.lang.String.class,string)));
        $line=18;
        Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
        $line=19;
        System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("La cadena fue aceptada ",(($bool(result))?("aceptada"):("rechazada"))),". Resultado: "),tokenStream)}));
      }
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Z.class,"testAutomaton",$line);
    }
    return $result;
  }
  public static ITransducer createAutomaton() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=31;
      Object Q=$fix(GCollections.asSet("a","b"));
      $line=33;
      Object \u03A3=$fix($opIntvlY('a','b'));
      $line=34;
      Object Out=$fix(\u03A3);
      $line=35;
      Object q_0=$fix("a");
      $line=36;
      Object F=$fix(GCollections.asSet("b"));
      $line=37;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,Out,q_0,F,new GMethod(Z.class,"\u03B4"),new GMethod(Z.class,"g"),new GMethod(Z.class,"h")});
      if (true) break $try;
      $line=38;
      $rethrow(new RuntimeException("The function \"createAutomaton()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Z.class,"createAutomaton",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=41;
      if ($opEqualY(\u03C3,'a')) {
        $line=41;
        $result="a";
        if (true) break $try;
      }
      else {
        $line=41;
        $result="b";
        if (true) break $try;
      }
      $line=42;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Z.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=47;
      $result=q;
      if (true) break $try;
      $line=48;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Z.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=51;
      $result="";
      if (true) break $try;
      $line=53;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Z.class,"h",$line);
    }
    return $result;
  }
}
