// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/LexerParser.gold"
import gold.structures.automaton.*;
import gold.util.*;
import gold.visualization.automaton.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class LexerParser {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=5;
      Object Lexer=$fix($invokeMethod(LexerParser.class,"createTransducer",true,null,new Object[]{}));
      $line=6;
      Object Parser=$fix($invokeMethod(LexerParser.class,"createAutomaton",true,null,new Object[]{}));
      $line=9;
      $invokeMethod(LexerParser.class,"testParser",true,null,new Object[]{Lexer,Parser});
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser.class,"main",$line);
    }
  }
  public static Object testParser(ITransducer M, IPushdownAutomaton P) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=17;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=18;
      while (true) {
        if (!($bool(true))) break;
        $line=19;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=20;
        System.out.println($message(new Object[]{"Digite la cadena de entrada:"}));
        $line=21;
        Object string=$fix($opAdditY(((java.util.Scanner)sc).nextLine()," "));
        $line=22;
        Object result=$fix(((gold.structures.automaton.ITransducer)M).acceptsString($cast(java.lang.String.class,string)));
        $line=23;
        Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
        $line=24;
        System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("Lexicamente, la cadena fue aceptada ",(($bool(result))?("aceptada"):("rechazada"))),". Resultado: "),tokenStream)}));
        $line=26;
        result=$fix(((gold.structures.automaton.IPushdownAutomaton)P).acceptsString($cast(java.lang.String.class,tokenStream)));
        $line=27;
        System.out.println($message(new Object[]{$opAdditY("Sint\u00E1cticamente, la cadena fue ",(($bool(result))?("aceptada"):("rechazada")))}));
      }
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser.class,"testParser",$line);
    }
    return $result;
  }
  public static IPushdownAutomaton createAutomaton() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=43;
      Object Terms=$fix(GCollections.asSet('(',')','+','*','v','n'));
      $line=44;
      Object NonTerms=$fix(GCollections.asSet('E','L'));
      $line=45;
      Object Q=$fix(GCollections.asSet("I","q","F"));
      $line=46;
      Object \u03A3=$fix(GCollections.asSet('(',')','+','*','v','n'));
      $line=47;
      Object \u0393=$fix(GCollections.asSet('(',')','+','*','v','n','E','L','$','0'));
      $line=48;
      Object q_0=$fix("I");
      $line=49;
      Object F=$fix(GCollections.asSet("F"));
      $line=50;
      Object M=$fix($invokeConstructor(GPushdownAutomaton.class,new Object[]{Q,\u03A3,\u0393,q_0,F}));
      $line=52;
      $invokeMethod("push",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","q",$cast(java.lang.String.class,"")),new Object[]{"$E"});
      $line=53;
      $invokeMethod("pop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","F",$cast(java.lang.String.class,"")),new Object[]{"$"});
      $line=55;
      for (Object $v1:GCollections.unmodifiableCollection(GCollections.asSet('(',')','+','*','v','n'))) {
        Object x=$v1;
        $line=56;
        $invokeMethod("pop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,$opAdditY("",x))),new Object[]{$opAdditY("",x)});
      }
      $line=58;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E","v"});
      $line=59;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E","n"});
      $line=60;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E",")L+("});
      $line=61;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E",")L*("});
      $line=62;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"L","E"});
      $line=63;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"L","EL"});
      $line=64;
      $result=M;
      if (true) break $try;
      $line=65;
      $rethrow(new RuntimeException("The function \"createAutomaton()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser.class,"createAutomaton",$line);
    }
    return $cast(IPushdownAutomaton.class,$result);
  }
  public static ITransducer createTransducer() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=72;
      Object Q=$fix(GCollections.asSet("I","Id","p","pl","plu","plus","t","ti","tim","time","times","Num","Err"));
      $line=74;
      Object \u03A3=$fix($opUnionY($opUnionY($opIntvlY('0','9'),$opIntvlY('a','z')),GCollections.asSet('(',')',' ')));
      $line=75;
      Object Out=$fix(GCollections.asSet('(',')','+','*','v','n'));
      $line=76;
      Object q_0=$fix("I");
      $line=77;
      Object F=$fix(GCollections.asSet("I"));
      $line=78;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,Out,q_0,F,new GMethod(LexerParser.class,"\u03B4"),new GMethod(LexerParser.class,"g"),new GMethod(LexerParser.class,"h")});
      if (true) break $try;
      $line=79;
      $rethrow(new RuntimeException("The function \"createTransducer()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser.class,"createTransducer",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=82;
      if ($bool($opEqualY(q,"Err"))) {
        $line=82;
        $result="Err";
        if (true) break $try;
      }
      else {
        $line=83;
        if ($opMembrY(\u03C3,GCollections.asSet('(',')',' '))) {
          $line=83;
          $result="I";
          if (true) break $try;
        }
        else {
          $line=84;
          if (($opEqualY(q,"I")&&$opEqualY(\u03C3,'p'))) {
            $line=84;
            $result="p";
            if (true) break $try;
          }
          else {
            $line=85;
            if (($opEqualY(q,"I")&&$opEqualY(\u03C3,'t'))) {
              $line=85;
              $result="t";
              if (true) break $try;
            }
            else {
              $line=86;
              if (($opEqualY(q,"I")&&$opMembrY(\u03C3,$opIntvlY('0','9')))) {
                $line=86;
                $result="Num";
                if (true) break $try;
              }
              else {
                $line=87;
                if (($opEqualY(q,"Num")&&$opMembrY(\u03C3,$opIntvlY('0','9')))) {
                  $line=87;
                  $result="Num";
                  if (true) break $try;
                }
                else {
                  $line=88;
                  if (($opEqualY(q,"Num")&&$opMembrY(\u03C3,$opIntvlY('a','z')))) {
                    $line=88;
                    $result="Err";
                    if (true) break $try;
                  }
                  else {
                    $line=89;
                    if (($opEqualY(q,"p")&&$opEqualY(\u03C3,'l'))) {
                      $line=89;
                      $result="pl";
                      if (true) break $try;
                    }
                    else {
                      $line=90;
                      if (($opEqualY(q,"pl")&&$opEqualY(\u03C3,'u'))) {
                        $line=90;
                        $result="plu";
                        if (true) break $try;
                      }
                      else {
                        $line=91;
                        if (($opEqualY(q,"plu")&&$opEqualY(\u03C3,'s'))) {
                          $line=91;
                          $result="plus";
                          if (true) break $try;
                        }
                        else {
                          $line=92;
                          if (($opEqualY(q,"t")&&$opEqualY(\u03C3,'i'))) {
                            $line=92;
                            $result="ti";
                            if (true) break $try;
                          }
                          else {
                            $line=93;
                            if (($opEqualY(q,"ti")&&$opEqualY(\u03C3,'m'))) {
                              $line=93;
                              $result="tim";
                              if (true) break $try;
                            }
                            else {
                              $line=94;
                              if (($opEqualY(q,"tim")&&$opEqualY(\u03C3,'e'))) {
                                $line=94;
                                $result="time";
                                if (true) break $try;
                              }
                              else {
                                $line=95;
                                if (($opEqualY(q,"time")&&$opEqualY(\u03C3,'s'))) {
                                  $line=95;
                                  $result="times";
                                  if (true) break $try;
                                }
                                else {
                                  $line=96;
                                  $result="Id";
                                  if (true) break $try;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=98;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=103;
      $result="";
      if (true) break $try;
      $line=104;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=107;
      String s=null;
      s=$defaultValue(String.class);
      $line=108;
      s=$cast(String.class,$fix(""));
      $line=110;
      if ((!$opMembrY(q,GCollections.asSet("Err"))&&$opMembrY(\u03C3,GCollections.asSet('(',')',' ')))) {
        $line=112;
        if (!$opMembrY(\u03C3,GCollections.asSet(' '))) {
          $line=112;
          s=$cast(String.class,$fix($invokeMethod(String.class,"valueOf",true,null,new Object[]{\u03C3})));
        }
        $line=114;
        if ($opEqualY(q,"I")) {
          $line=114;
          $result=s;
          if (true) break $try;
        }
        else {
          $line=115;
          if ($opEqualY(q,"plus")) {
            $line=115;
            $result=$opAdditY("+",s);
            if (true) break $try;
          }
          else {
            $line=116;
            if ($opEqualY(q,"times")) {
              $line=116;
              $result=$opAdditY("*",s);
              if (true) break $try;
            }
            else {
              $line=117;
              if ($opEqualY(q,"Num")) {
                $line=117;
                $result=$opAdditY("n",s);
                if (true) break $try;
              }
              else {
                $line=118;
                $result=$opAdditY("v",s);
                if (true) break $try;
              }
            }
          }
        }
      }
      else {
        $line=120;
        $result="";
        if (true) break $try;
      }
      $line=123;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser.class,"h",$line);
    }
    return $result;
  }
}
