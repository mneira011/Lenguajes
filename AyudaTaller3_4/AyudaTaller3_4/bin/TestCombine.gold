using gold.structures.automaton.*
using gold.visualization.automaton.*

procedure main(args:String[]) begin
    Lexer = createTransducer()
	Parser = createAutomaton()
	 //GAutomataFrame.show(Lexer)
    //GAutomataFrame.show(Parser)
     testParser(Lexer,Parser)
end
  
      

procedure testParser(M:ITransducer,P:IPushdownAutomaton) begin
	// M es el  analizador léxico
	// P es el  analizador sintáctico
	var sc:java.util.Scanner(System.$in)
	while true do
		print "----------------------------"
		print "Digite la cadena de entrada:"
		string:=sc.nextLine()+" "   //Se le agrega un espacio al final para marcar el final de la entrada. El espacio también es un separador.
		result:=M.acceptsString(string)    
		tokenStream := M.getOutputString()
		print "Lexicamente, la cadena fue aceptada "+(result?"aceptada":"rechazada")+". Resultado: "+tokenStream 
	  
		result:=P.acceptsString(tokenStream )  // Al parser se le pasa el token stream
		print "Sintácticamente, la cadena fue "+(result?"aceptada":"rechazada")
		
	end
end 

 

function createAutomaton():IPushdownAutomaton begin
	//  E -> n
	//  E ->  v
	//  E ->  (+L)
	//  E ->  (*L)
	//  L ->  E
	//  L ->  L E
	
	
	Terms := {'(',')','+','*','v','n'}
	NonTerms := {'E','L'}
	Q:={"I","q","F"}
	Σ:={'(',')','+','*','v','n'}
	Γ:={'(',')','+','*','v','n','E','L','$','0'}
	q₀:="I"
	F:={"F"}
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)
	
	M.delta("I","q","").push("$E")
	M.delta("q","F","").pop("$")
	
	for each x in {'(',')','+','*','v','n'} do
	  M.delta("q","q",""+x).pop(""+x)
	end
	M.delta("q","q","").changeTop("E","v")
	M.delta("q","q","").changeTop("E","n")
	M.delta("q","q","").changeTop("E",")L+(")
	M.delta("q","q","").changeTop("E",")L*(")
	M.delta("q","q","").changeTop("L","E")
	M.delta("q","q","").changeTop("L","EL")
return M
end

  
function createTransducer():ITransducer begin
	// Analizador léxico: Recibe una cadena de  letras minúsculas,  dígitos, paréntesis y epacios.
	// genera uns acena de paréntesis, suma,asterostico,ves y enes
	
	Q:= {"I","Id", "p", "pl" ,"plu", "plus", "t", "ti" ,"tim", "time", "times", "Num","Err"}
	
	Σ:=('0'‥'9') ∪ ('a' ‥ 'z') ∪ {'(',')',' '} 
	Out:={'(',')','+','*','v','n'} 
	q₀:="I"
	F:= {"I"}
	return 	GDeterministicTransducer(Q,Σ,Out,q₀,F,δ,g,h)
end

function δ(q,σ) begin
	if (q = "Err") then return "Err"
	elseif  σ ∈ {'(',')',' '} then return "I"	
    elseif q="I" and σ='p' then return "p"
	elseif q="I" and σ='t' then return "t"
	elseif q="I" and σ ∈ ('0' ‥ '9') then return "Num"
	elseif	q="Num" and σ ∈ ('0' ‥ '9') then return "Num"
	elseif	q="Num" and σ ∈ ('a' ‥ 'z') then return "Err"
	elseif q="p" and σ='l' then return "pl" 
    elseif q="pl" and σ='u' then return "plu" 
    elseif q="plu" and σ='s' then return "plus" 
	elseif q="t" and σ='i' then return "ti" 
    elseif q="ti" and σ='m' then return "tim" 
    elseif q="tim" and σ='e' then return "time" 
    elseif q="time" and σ='s' then return "times" 
    else  return "Id"
    end	
end 



function g(q) begin
	return λ
end

function h(q,σ) begin
var s: String
s := λ

if q ∉ {"Err"} and σ ∈ {'(',')',' '} then

		if σ ∉ {' '} then  s=String.valueOf(σ) end

      if q=="I" then return s
      elseif q=="plus" then return "+"+s 
      elseif q=="times" then return "*"+s
      elseif q=="Num" then return "n"+s
      else return "v"+s
      end
else return  λ

end
end